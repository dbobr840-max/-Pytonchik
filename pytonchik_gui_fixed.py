import os
import sys
import tkinter as tk
from tkinter import messagebox
import subprocess

class PytonchikGUIInterpreter:
    def __init__(self):
        self.variables = {}
        self.output = []
        self.root = None
        self.widgets = []
    
    def evaluate(self, expr):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        if not expr:
            return ""
        expr = str(expr).strip()
        
        # –°—Ç—Ä–æ–∫–∏
        if expr.startswith('"') and expr.endswith('"'):
            return expr[1:-1]
        
        # –ß–∏—Å–ª–∞
        try: return int(expr)
        except: pass
        try: return float(expr)
        except: pass
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if expr in self.variables:
            return self.variables[expr]
            
        return expr
    
    def execute_line(self, line):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞"""
        line = line.strip()
        if not line or line.startswith('#'):
            return None
        
        # GUI –∫–æ–º–∞–Ω–¥—ã
        if line.startswith('–æ–∫–Ω–æ(') and line.endswith(')'):
            title = line[5:-1].strip('"')
            self.create_window(title)
            self.output.append(f"‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {title}")
            return True
            
        elif line.startswith('–º–µ—Ç–∫–∞(') and line.endswith(')'):
            text = line[6:-1].strip('"')
            self.create_label(text)
            self.output.append(f"‚úÖ –ú–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {text}")
            return True
            
        elif line.startswith('–∫–Ω–æ–ø–∫–∞(') and line.endswith(')'):
            text = line[7:-1].strip('"')
            self.create_button(text)
            self.output.append(f"‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {text}")
            return True
            
        elif line == '–ø–æ–∫–∞–∑–∞—Ç—å()':
            if self.root:
                self.output.append("üé® –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
            else:
                self.output.append("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–∫–Ω–æ: –æ–∫–Ω–æ('–ó–∞–≥–æ–ª–æ–≤–æ–∫')")
            return True
        
        # –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Pytonchik
        elif line.startswith('=^(') and line.endswith(')'):
            content = line[3:-1].strip()
            result = self.evaluate(content)
            self.output.append(str(result))
            return True
        
        elif ' = ' in line:
            parts = line.split(' = ', 1)
            if len(parts) == 2:
                var_name = parts[0].strip()
                value_expr = parts[1].strip()
                self.variables[var_name] = self.evaluate(value_expr)
                self.output.append(f"üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var_name} = {self.variables[var_name]}")
                return True
        
        return False
    
    def create_window(self, title="Pytonchik GUI"):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ"""
        if self.root:
            self.root.destroy()
            
        self.root = tk.Tk()
        self.root.title(title)
        self.root.geometry("500x400")
        self.root.configure(bg='lightblue')
        self.widgets = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.root, text=title, 
                              font=("Arial", 16, "bold"), 
                              bg='lightblue', fg='darkblue')
        title_label.pack(pady=15)
        self.widgets.append(title_label)
    
    def create_label(self, text):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É"""
        if not self.root:
            self.create_window("Pytonchik GUI")
            
        label = tk.Label(self.root, text=text, 
                        font=("Arial", 11),
                        bg='lightblue')
        label.pack(pady=8)
        self.widgets.append(label)
    
    def create_button(self, text):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É"""
        if not self.root:
            self.create_window("Pytonchik GUI")
            
        button = tk.Button(self.root, text=text, 
                          font=("Arial", 10, "bold"),
                          bg='lightgreen',
                          command=lambda: self.button_click(text))
        button.pack(pady=10, padx=20, fill='x')
        self.widgets.append(button)
    
    def button_click(self, button_text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
        messagebox.showinfo("Pytonchik GUI", f"–í—ã –Ω–∞–∂–∞–ª–∏: {button_text}")
    
    def show_gui(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç GUI"""
        if self.root:
            self.root.mainloop()
    
    def run(self, code):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–¥"""
        lines = code.split('\n')
        
        for line in lines:
            self.execute_line(line)
        
        return self.output

def run_pt_file(filename):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç .pt —Ñ–∞–π–ª"""
    if not filename.endswith('.pt'):
        filename += '.pt'
    
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        return False
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º: {filename}")
    print("=" * 50)
    
    with open(filename, 'r', encoding='utf-8') as f:
        code = f.read()
    
    interpreter = PytonchikGUIInterpreter()
    results = interpreter.run(code)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    for result in results:
        print(result)
    
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º GUI –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∫–Ω–æ
    if interpreter.root:
        print("üé® –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ...")
        print("‚ÑπÔ∏è  –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")
        interpreter.show_gui()
    else:
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ GUI)")
    
    return True

def create_example():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä"""
    example_code = '''# –†–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä GUI –ø—Ä–æ–≥—Ä–∞–º–º—ã
–æ–∫–Ω–æ("–ú–æ—è –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ Pytonchik")
–º–µ—Ç–∫–∞("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
–º–µ—Ç–∫–∞("–≠—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
–º–µ—Ç–∫–∞("–°–æ–∑–¥–∞–Ω–æ –Ω–∞ —è–∑—ã–∫–µ Pytonchik")
–∫–Ω–æ–ø–∫–∞("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
–∫–Ω–æ–ø–∫–∞("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
–∫–Ω–æ–ø–∫–∞("–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")
–ø–æ–∫–∞–∑–∞—Ç—å()
'''
    
    with open("working_example.pt", "w", encoding="utf-8") as f:
        f.write(example_code)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–∏–º–µ—Ä: working_example.pt")
    return "working_example.pt"

def create_project(name):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    os.makedirs(name, exist_ok=True)
    
    project_code = f'''# main.pt - –ø—Ä–æ–µ–∫—Ç {name}
–æ–∫–Ω–æ("–ü—Ä–æ–≥—Ä–∞–º–º–∞ {name}")
–º–µ—Ç–∫–∞("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {name}")
–º–µ—Ç–∫–∞("–≠—Ç–æ –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è GUI –ø—Ä–æ–≥—Ä–∞–º–º–∞")
–∫–Ω–æ–ø–∫–∞("–°—Ç–∞—Ä—Ç")
–∫–Ω–æ–ø–∫–∞("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
–∫–Ω–æ–ø–∫–∞("–í—ã—Ö–æ–¥")
–ø–æ–∫–∞–∑–∞—Ç—å()
'''
    
    with open(f"{name}/main.pt", "w", encoding="utf-8") as f:
        f.write(project_code)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {name}")
    print(f"üìÅ –ü–∞–ø–∫–∞: {name}")
    print(f"üìÑ –§–∞–π–ª: {name}/main.pt")
    return f"{name}/main.pt"

def main():
    if len(sys.argv) < 2:
        print("üêç Pytonchik GUI System")
        print("=" * 30)
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  run <file.pt>     - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª")
        print("  example           - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä")
        print("  create <name>     - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
        print("  test              - —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫")
        print()
        print("–ü—Ä–∏–º–µ—Ä:")
        print("  python pytonchik_gui_fixed.py run working_example.pt")
        return
    
    command = sys.argv[1]
    
    if command == "run":
        filename = sys.argv[2] if len(sys.argv) > 2 else "main.pt"
        run_pt_file(filename)
        
    elif command == "example":
        filename = create_example()
        print(f"üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python pytonchik_gui_fixed.py run {filename}")
        
    elif command == "create":
        name = sys.argv[2] if len(sys.argv) > 2 else "my_gui_app"
        filename = create_project(name)
        print(f"üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python pytonchik_gui_fixed.py run {filename}")
        
    elif command == "test":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
        test_code = '''# –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
–æ–∫–Ω–æ("–¢–µ—Å—Ç Pytonchik GUI")
–º–µ—Ç–∫–∞("–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
–º–µ—Ç–∫–∞("GUI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
–∫–Ω–æ–ø–∫–∞("–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")
–ø–æ–∫–∞–∑–∞—Ç—å()
'''
        print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç...")
        interpreter = PytonchikGUIInterpreter()
        results = interpreter.run(test_code)
        
        for result in results:
            print(result)
            
        if interpreter.root:
            print("üéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è GUI...")
            interpreter.show_gui()
        else:
            print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main()