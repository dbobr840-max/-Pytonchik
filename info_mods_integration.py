import sys
import os
sys.path.append('C:\\Pytonchik')

try:
    from info_mods_plugin import MegaModsPlugin, start_info_mods
    INFO_MODS_AVAILABLE = True
except ImportError:
    INFO_MODS_AVAILABLE = False

class PytonchikInfoMods:
    def __init__(self):
        self.plugin = MegaModsPlugin() if INFO_MODS_AVAILABLE else None
        self.output = []
    
    def execute_command(self, command, args):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ Info+Mods"""
        if not INFO_MODS_AVAILABLE:
            return "‚ùå –ü–ª–∞–≥–∏–Ω Info+Mods –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        if command == '–º–æ–¥—ã_—Å–ø–∏—Å–æ–∫':
            return self.list_mods()
        elif command == '–º–æ–¥—ã_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            return self.list_categories()
        elif command == '–º–æ–¥—ã_–∑–∞–ø—É—Å–∫':
            return self.launch_gui()
        elif command.startswith('–º–æ–¥_'):
            mod_name = command[4:]  # –£–±–∏—Ä–∞–µ–º '–º–æ–¥_'
            return self.run_mod(mod_name, args)
        else:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}"
    
    def list_mods(self):
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π"""
        if not self.plugin:
            return "‚ùå –ü–ª–∞–≥–∏–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        result = "üöÄ INFO+MODS - 200+ –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô:\n\n"
        
        categories = {}
        for mod_id, mod_data in self.plugin.mods.items():
            category = mod_data['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(f"  ‚Ä¢ {mod_data['name']} (–º–æ–¥_{mod_id})")
        
        for category, mods in categories.items():
            result += f"üìÅ {category.upper()}:\n"
            result += "\n".join(mods) + "\n\n"
        
        return result
    
    def list_categories(self):
        """–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = {
            'system': 'üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (30+)',
            'info': 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ (40+)', 
            'fun': 'üéÆ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ (30+)',
            'utils': 'üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã (50+)',
            'dev': 'üíª –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (25+)',
            'security': 'üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (15+)',
            'internet': 'üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç (20+)',
            'graphics': 'üé® –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ (10+)'
        }
        
        result = "üìÅ –ö–ê–¢–ï–ì–û–†–ò–ò –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô:\n\n"
        for cat_id, cat_name in categories.items():
            result += f"{cat_name}\n"
        
        return result
    
    def run_mod(self, mod_name, args):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        if not self.plugin:
            return "‚ùå –ü–ª–∞–≥–∏–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
        
        return self.plugin.execute_mod(mod_name, *args)
    
    def launch_gui(self):
        """–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            start_info_mods()
            return "‚úÖ Info+Mods GUI –∑–∞–ø—É—â–µ–Ω"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
info_mods_manager = PytonchikInfoMods()

def info_mods_command(command, *args):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ Pytonchik"""
    return info_mods_manager.execute_command(command, args)