import requests
import json
import os
import tkinter as tk
from tkinter import ttk, messagebox
import webbrowser
from datetime import datetime

class YouTubePlugin:
    def __init__(self):
        self.api_key = self.load_api_key()
        self.base_url = "https://www.googleapis.com/youtube/v3"
        
    def load_api_key(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        key_file = "C:\\Pytonchik\\youtube_api_key.txt"
        if os.path.exists(key_file):
            with open(key_file, 'r') as f:
                return f.read().strip()
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            with open(key_file, 'w') as f:
                f.write("–í–°–¢–ê–í–¨–¢–ï_–í–ê–®_API_–ö–õ–Æ–ß_–ó–î–ï–°–¨")
            messagebox.showwarning("YouTube API", 
                                 f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {key_file}\n"
                                 "–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://console.cloud.google.com/")
            return None
    
    def make_request(self, endpoint, params):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ YouTube API"""
        if not self.api_key or self.api_key == "–í–°–¢–ê–í–¨–¢–ï_–í–ê–®_API_–ö–õ–Æ–ß_–ó–î–ï–°–¨":
            return {"error": "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        params['key'] = self.api_key
        try:
            response = requests.get(f"{self.base_url}/{endpoint}", params=params)
            return response.json()
        except Exception as e:
            return {"error": str(e)}
    
    def get_channel_stats(self, channel_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
        params = {
            'part': 'statistics,snippet',
            'id': channel_id
        }
        return self.make_request('channels', params)
    
    def get_channel_videos(self, channel_id, max_results=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–≥—Ä—É–∑–æ–∫ –∫–∞–Ω–∞–ª–∞
        params = {
            'part': 'contentDetails',
            'id': channel_id
        }
        channel_data = self.make_request('channels', params)
        
        if 'error' in channel_data:
            return channel_data
        
        if 'items' not in channel_data or not channel_data['items']:
            return {"error": "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        uploads_playlist_id = channel_data['items'][0]['contentDetails']['relatedPlaylists']['uploads']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–æ–∫
        params = {
            'part': 'snippet',
            'playlistId': uploads_playlist_id,
            'maxResults': max_results
        }
        return self.make_request('playlistItems', params)
    
    def search_videos(self, query, max_results=10):
        """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ"""
        params = {
            'part': 'snippet',
            'q': query,
            'type': 'video',
            'maxResults': max_results
        }
        return self.make_request('search', params)
    
    def get_video_details(self, video_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        params = {
            'part': 'snippet,statistics,contentDetails',
            'id': video_id
        }
        return self.make_request('videos', params)
    
    def format_number(self, num):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª (1K, 1M –∏ —Ç.–¥.)"""
        try:
            num = int(num)
            if num >= 1000000:
                return f"{num/1000000:.1f}M"
            elif num >= 1000:
                return f"{num/1000:.1f}K"
            else:
                return str(num)
        except:
            return num

class YouTubeGUI:
    def __init__(self, root):
        self.root = root
        self.youtube = YouTubePlugin()
        self.setup_gui()
        
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title("YouTube+ üé¨ - Pytonchik Plugin")
        self.root.geometry("800x600")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tab_control = ttk.Notebook(self.root)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
        self.stats_tab = ttk.Frame(tab_control)
        tab_control.add(self.stats_tab, text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞')
        self.setup_stats_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ
        self.search_tab = ttk.Frame(tab_control)
        tab_control.add(self.search_tab, text='üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ')
        self.setup_search_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ
        self.watch_tab = ttk.Frame(tab_control)
        tab_control.add(self.watch_tab, text='üé• –ü—Ä–æ—Å–º–æ—Ç—Ä')
        self.setup_watch_tab()
        
        tab_control.pack(expand=1, fill='both')
        
    def setup_stats_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞
        ttk.Label(self.stats_tab, text="ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ username:").pack(pady=5)
        self.channel_entry = ttk.Entry(self.stats_tab, width=50)
        self.channel_entry.pack(pady=5)
        self.channel_entry.insert(0, "UC_x5XG1OV2P6uZZ5FSM9Ttw")  # YouTube API –∫–∞–Ω–∞–ª
        
        ttk.Button(self.stats_tab, text="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                  command=self.show_channel_stats).pack(pady=10)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_frame = ttk.Frame(self.stats_tab)
        self.stats_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
    def setup_search_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞"""
        ttk.Label(self.search_tab, text="–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ:").pack(pady=5)
        self.search_entry = ttk.Entry(self.search_tab, width=50)
        self.search_entry.pack(pady=5)
        self.search_entry.insert(0, "Python programming")
        
        ttk.Button(self.search_tab, text="–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ", 
                  command=self.search_videos).pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        self.search_results = tk.Listbox(self.search_tab, height=15)
        self.search_results.pack(fill='both', expand=True, padx=10, pady=5)
        self.search_results.bind('<<ListboxSelect>>', self.on_video_select)
        
    def setup_watch_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        ttk.Label(self.watch_tab, text="ID –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:").pack(pady=5)
        self.video_entry = ttk.Entry(self.watch_tab, width=50)
        self.video_entry.pack(pady=5)
        
        ttk.Button(self.watch_tab, text="–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ", 
                  command=self.watch_video).pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
        self.video_info = tk.Text(self.watch_tab, height=10, wrap='word')
        self.video_info.pack(fill='both', expand=True, padx=10, pady=5)
        
    def show_channel_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞"""
        channel_id = self.channel_entry.get().strip()
        if not channel_id:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞")
            return
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for widget in self.stats_frame.winfo_children():
            widget.destroy()
        
        data = self.youtube.get_channel_stats(channel_id)
        
        if 'error' in data:
            ttk.Label(self.stats_frame, text=f"–û—à–∏–±–∫–∞: {data['error']}").pack()
            return
        
        if 'items' not in data or not data['items']:
            ttk.Label(self.stats_frame, text="–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω").pack()
            return
        
        channel = data['items'][0]
        snippet = channel['snippet']
        stats = channel['statistics']
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_text = f"""
üì∫ –ö–∞–Ω–∞–ª: {snippet['title']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {snippet['description'][:100]}...
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {self.youtube.format_number(stats.get('subscriberCount', 'N/A'))}
üìä –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {self.youtube.format_number(stats.get('viewCount', 'N/A'))}
üé¨ –í–∏–¥–µ–æ: {self.youtube.format_number(stats.get('videoCount', 'N/A'))}
üïí –°–æ–∑–¥–∞–Ω: {snippet['publishedAt'][:10]}
        """
        
        ttk.Label(self.stats_frame, text=info_text, justify='left').pack(anchor='w')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ
        ttk.Label(self.stats_frame, text="\nüé• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∏–¥–µ–æ:", 
                 font=('Arial', 10, 'bold')).pack(anchor='w', pady=(10,5))
        
        videos_data = self.youtube.get_channel_videos(channel_id, 5)
        if 'items' in videos_data:
            for video in videos_data['items']:
                title = video['snippet']['title']
                btn = ttk.Button(self.stats_frame, text=title[:50] + "...", 
                               command=lambda v=video: self.open_video(v['snippet']['resourceId']['videoId']))
                btn.pack(anchor='w', pady=2)
        
    def search_videos(self):
        """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ"""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        self.search_results.delete(0, tk.END)
        
        data = self.youtube.search_videos(query, 15)
        
        if 'error' in data:
            self.search_results.insert(tk.END, f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        if 'items' not in data:
            self.search_results.insert(tk.END, "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for video in data['items']:
            title = video['snippet']['title']
            channel = video['snippet']['channelTitle']
            self.search_results.insert(tk.END, f"{title} | {channel}")
            self.search_results.video_data = data['items']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    
    def on_video_select(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        selection = self.search_results.curselection()
        if selection:
            index = selection[0]
            video_data = self.search_results.video_data[index]
            video_id = video_data['id']['videoId']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            details = self.youtube.get_video_details(video_id)
            if 'items' in details:
                video = details['items'][0]
                self.show_video_details(video)
    
    def show_video_details(self, video):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ"""
        snippet = video['snippet']
        stats = video.get('statistics', {})
        
        info_text = f"""
üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {snippet['title']}
üì∫ –ö–∞–Ω–∞–ª: {snippet['channelTitle']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {snippet['description'][:200]}...
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {self.youtube.format_number(stats.get('viewCount', 'N/A'))}
üëç –õ–∞–π–∫–æ–≤: {self.youtube.format_number(stats.get('likeCount', 'N/A'))}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {self.youtube.format_number(stats.get('commentCount', 'N/A'))}
üïí –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {snippet['publishedAt'][:10]}
üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {video.get('contentDetails', {}).get('duration', 'N/A')}
        """
        
        self.video_info.delete(1.0, tk.END)
        self.video_info.insert(1.0, info_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∏–¥–µ–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.video_entry.delete(0, tk.END)
        self.video_entry.insert(0, video['id'])
    
    def watch_video(self):
        """–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        video_id = self.video_entry.get().strip()
        if video_id:
            webbrowser.open(f"https://www.youtube.com/watch?v={video_id}")
    
    def open_video(self, video_id):
        """–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –ø–æ ID"""
        webbrowser.open(f"https://www.youtube.com/watch?v={video_id}")

def start_youtube_plugin():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ YouTube"""
    root = tk.Tk()
    app = YouTubeGUI(root)
    root.mainloop()

if __name__ == "__main__":
    start_youtube_plugin()