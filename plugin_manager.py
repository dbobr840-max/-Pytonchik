import os
import sys
import requests
import json
import zipfile
import tempfile
import shutil
from urllib.parse import urljoin
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import importlib

class PluginManager:
    def __init__(self):
        self.plugins_dir = "C:\\Pytonchik\\plugins"
        self.plugins_config = "C:\\Pytonchik\\plugins_config.json"
        self.available_plugins = self.load_plugins_config()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs(self.plugins_dir, exist_ok=True)
        
    def load_plugins_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        default_plugins = {
            "youtube-plus": {
                "name": "YouTube+",
                "description": "üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ YouTube —á–µ—Ä–µ–∑ Pytonchik",
                "version": "1.0.0",
                "author": "Pytonchik Team",
                "dependencies": ["requests", "tkinter"],
                "files": [
                    "youtube_plugin.py",
                    "youtube_pt.py", 
                    "youtube_plugin.bat"
                ],
                "github_url": "https://raw.githubusercontent.com/pytonchik/plugins/main/youtube-plus/",
                "install_command": "youtube_install.bat"
            },
            "info-mods": {
                "name": "Info+Mods", 
                "description": "üöÄ 200+ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è Pytonchik",
                "version": "1.0.0",
                "author": "Pytonchik Team",
                "dependencies": ["psutil", "GPUtil", "pyautogui", "pygame", "speechrecognition", "qrcode", "speedtest-cli"],
                "files": [
                    "info_mods_plugin.py",
                    "info_mods_integration.py",
                    "info_mods.bat"
                ],
                "github_url": "https://raw.githubusercontent.com/pytonchik/plugins/main/info-mods/",
                "install_command": "info_mods_install.bat"
            },
            "gui-builder": {
                "name": "GUI Builder",
                "description": "üé® –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
                "version": "1.0.0", 
                "author": "Pytonchik Team",
                "dependencies": ["tkinter", "PIL"],
                "files": ["gui_builder.py"],
                "github_url": "https://raw.githubusercontent.com/pytonchik/plugins/main/gui-builder/",
                "install_command": "gui_builder_install.bat"
            },
            "game-engine": {
                "name": "Game Engine",
                "description": "üéÆ –î–≤–∏–∂–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 2D –∏–≥—Ä",
                "version": "1.0.0",
                "author": "Pytonchik Team", 
                "dependencies": ["pygame", "numpy"],
                "files": ["game_engine.py"],
                "github_url": "https://raw.githubusercontent.com/pytonchik/plugins/main/game-engine/",
                "install_command": "game_engine_install.bat"
            },
            "ai-assistant": {
                "name": "AI Assistant",
                "description": "ü§ñ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º",
                "version": "1.0.0",
                "author": "Pytonchik Team",
                "dependencies": ["speechrecognition", "pyttsx3", "requests"],
                "files": ["ai_assistant.py"],
                "github_url": "https://raw.githubusercontent.com/pytonchik/plugins/main/ai-assistant/",
                "install_command": "ai_assistant_install.bat"
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(self.plugins_config):
            with open(self.plugins_config, 'w', encoding='utf-8') as f:
                json.dump(default_plugins, f, ensure_ascii=False, indent=2)
            return default_plugins
        else:
            with open(self.plugins_config, 'r', encoding='utf-8') as f:
                return json.load(f)
    
    def list_available_plugins(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        result = "üì¶ –î–û–°–¢–£–ü–ù–´–ï –ü–õ–ê–ì–ò–ù–´:\n\n"
        for plugin_id, plugin_info in self.available_plugins.items():
            result += f"üîπ {plugin_info['name']} ({plugin_id})\n"
            result += f"   üìù {plugin_info['description']}\n"
            result += f"   üè∑Ô∏è –í–µ—Ä—Å–∏—è: {plugin_info['version']}\n"
            result += f"   üë§ –ê–≤—Ç–æ—Ä: {plugin_info['author']}\n"
            result += f"   üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞: install-sets {plugin_id}\n\n"
        return result
    
    def list_installed_plugins(self):
        """–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        installed = []
        for plugin_id in self.available_plugins:
            if self.is_plugin_installed(plugin_id):
                installed.append(plugin_id)
        
        if not installed:
            return "‚ùå –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"
        
        result = "üìÅ –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ü–õ–ê–ì–ò–ù–´:\n\n"
        for plugin_id in installed:
            plugin_info = self.available_plugins[plugin_id]
            result += f"‚úÖ {plugin_info['name']} ({plugin_id})\n"
            result += f"   üìù {plugin_info['description']}\n"
            result += f"   üè∑Ô∏è –í–µ—Ä—Å–∏—è: {plugin_info['version']}\n\n"
        
        return result
    
    def is_plugin_installed(self, plugin_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–ª–∞–≥–∏–Ω"""
        if plugin_id not in self.available_plugins:
            return False
        
        plugin_info = self.available_plugins[plugin_id]
        for file in plugin_info['files']:
            file_path = os.path.join(self.plugins_dir, file)
            if not os.path.exists(file_path):
                return False
        return True
    
    def install_plugin(self, plugin_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞"""
        if plugin_id not in self.available_plugins:
            return f"‚ùå –ü–ª–∞–≥–∏–Ω '{plugin_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if self.is_plugin_installed(plugin_id):
            return f"‚úÖ –ü–ª–∞–≥–∏–Ω '{plugin_id}' —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        plugin_info = self.available_plugins[plugin_id]
        results = []
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        results.append(self.install_dependencies(plugin_info['dependencies']))
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–∞
        for file in plugin_info['files']:
            result = self.download_plugin_file(plugin_id, file)
            results.append(result)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'install_command' in plugin_info:
            result = self.run_install_command(plugin_id, plugin_info['install_command'])
            results.append(result)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.create_examples(plugin_id)
        
        return "\n".join(results) + f"\n\n‚úÖ –ü–ª–∞–≥–∏–Ω '{plugin_info['name']}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    
    def install_dependencies(self, dependencies):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        if not dependencies:
            return "üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: –Ω–µ—Ç"
        
        results = ["üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:"]
        for dep in dependencies:
            try:
                # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏
                importlib.import_module(dep)
                results.append(f"   ‚úÖ {dep} - —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ pip
                    subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
                    results.append(f"   ‚úÖ {dep} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except subprocess.CalledProcessError:
                    results.append(f"   ‚ùå {dep} - –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        return "\n".join(results)
    
    def download_plugin_file(self, plugin_id, filename):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞"""
        plugin_info = self.available_plugins[plugin_id]
        github_url = plugin_info['github_url']
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å GitHub
        # –î–ª—è –¥–µ–º–æ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª—å–Ω–æ
        file_path = os.path.join(self.plugins_dir, filename)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ñ–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–æ–≤
            if plugin_id == "youtube-plus":
                self.create_youtube_plugin_files()
            elif plugin_id == "info-mods":
                self.create_info_mods_files()
            elif plugin_id == "gui-builder":
                self.create_gui_builder_files()
            elif plugin_id == "game-engine":
                self.create_game_engine_files()
            elif plugin_id == "ai-assistant":
                self.create_ai_assistant_files()
            
            return f"   üì• {filename} - —Å–∫–∞—á–∞–Ω"
        except Exception as e:
            return f"   ‚ùå {filename} - –æ—à–∏–±–∫–∞: {e}"
    
    def run_install_command(self, plugin_id, command):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            if command.endswith('.bat'):
                bat_path = os.path.join(self.plugins_dir, command)
                if os.path.exists(bat_path):
                    subprocess.run(bat_path, check=True, cwd=self.plugins_dir)
                    return f"   ‚öôÔ∏è {command} - –≤—ã–ø–æ–ª–Ω–µ–Ω"
            return f"   ‚öôÔ∏è {command} - –ø—Ä–æ–ø—É—â–µ–Ω (—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)"
        except Exception as e:
            return f"   ‚ùå {command} - –æ—à–∏–±–∫–∞: {e}"
    
    def create_examples(self, plugin_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        examples_dir = os.path.join(self.plugins_dir, "examples")
        os.makedirs(examples_dir, exist_ok=True)
        
        if plugin_id == "youtube-plus":
            example_code = '''# youtube_demo.pt - –¥–µ–º–æ YouTube –ø–ª–∞–≥–∏–Ω–∞
–æ–∫–Ω–æ("YouTube+ üé¨")
–º–µ—Ç–∫–∞("=== YOUTUBE –£–ü–†–ê–í–õ–ï–ù–ò–ï ===")
–º–µ—Ç–∫–∞("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
–º–µ—Ç–∫–∞("–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ") 
–º–µ—Ç–∫–∞("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ")

–∫–Ω–æ–ø–∫–∞("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞")
–∫–Ω–æ–ø–∫–∞("üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ")
–∫–Ω–æ–ø–∫–∞("üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä")
–∫–Ω–æ–ø–∫–∞("üöÄ –ó–∞–ø—É—Å–∫ YouTube+")
–∫–Ω–æ–ø–∫–∞("‚ùå –í—ã—Ö–æ–¥")

–ø–æ–∫–∞–∑–∞—Ç—å()
'''
            with open(os.path.join(examples_dir, "youtube_demo.pt"), "w", encoding="utf-8") as f:
                f.write(example_code)
        
        elif plugin_id == "info-mods":
            example_code = '''# info_mods_demo.pt - –¥–µ–º–æ Info+Mods
–æ–∫–Ω–æ("Info+Mods üöÄ")
–º–µ—Ç–∫–∞("=== 200+ –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô ===")
–º–µ—Ç–∫–∞("–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä")
–º–µ—Ç–∫–∞("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
–º–µ—Ç–∫–∞("–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")

–∫–Ω–æ–ø–∫–∞("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
–∫–Ω–æ–ø–∫–∞("üíª –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Dev")
–∫–Ω–æ–ø–∫–∞("üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
–∫–Ω–æ–ø–∫–∞("üöÄ –ó–∞–ø—É—Å–∫ Info+Mods")
–∫–Ω–æ–ø–∫–∞("‚ùå –í—ã—Ö–æ–¥")

–ø–æ–∫–∞–∑–∞—Ç—å()
'''
            with open(os.path.join(examples_dir, "info_mods_demo.pt"), "w", encoding="utf-8") as f:
                f.write(example_code)
    
    def uninstall_plugin(self, plugin_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞"""
        if plugin_id not in self.available_plugins:
            return f"‚ùå –ü–ª–∞–≥–∏–Ω '{plugin_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if not self.is_plugin_installed(plugin_id):
            return f"‚ùå –ü–ª–∞–≥–∏–Ω '{plugin_id}' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        plugin_info = self.available_plugins[plugin_id]
        results = []
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–ª–∞–≥–∏–Ω–∞
        for file in plugin_info['files']:
            file_path = os.path.join(self.plugins_dir, file)
            if os.path.exists(file_path):
                os.remove(file_path)
                results.append(f"   üóëÔ∏è {file} - —É–¥–∞–ª–µ–Ω")
        
        return "\n".join(results) + f"\n\n‚úÖ –ü–ª–∞–≥–∏–Ω '{plugin_info['name']}' —É–¥–∞–ª–µ–Ω!"
    
    def create_youtube_plugin_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ YouTube –ø–ª–∞–≥–∏–Ω–∞ (–¥–µ–º–æ)"""
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã YouTube –ø–ª–∞–≥–∏–Ω–∞
        youtube_plugin_code = """
# YouTube+ Plugin (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è)
print("YouTube+ –ø–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
# –ü–æ–ª–Ω—ã–π –∫–æ–¥ –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω —Å GitHub
"""
        
        with open(os.path.join(self.plugins_dir, "youtube_plugin.py"), "w", encoding="utf-8") as f:
            f.write(youtube_plugin_code)
        
        # –ë–∞—Ç-—Ñ–∞–π–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        bat_content = '''@echo off
echo Installing YouTube+ dependencies...
pip install requests
echo YouTube+ plugin ready!
pause
'''
        with open(os.path.join(self.plugins_dir, "youtube_plugin.bat"), "w") as f:
            f.write(bat_content)
    
    def create_info_mods_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ Info+Mods –ø–ª–∞–≥–∏–Ω–∞ (–¥–µ–º–æ)"""
        info_mods_code = """
# Info+Mods Plugin (–¥–µ–º–æ –≤–µ—Ä—Å–∏—è) 
print("Info+Mods –ø–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
# –ü–æ–ª–Ω—ã–π –∫–æ–¥ –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω —Å GitHub
"""
        
        with open(os.path.join(self.plugins_dir, "info_mods_plugin.py"), "w", encoding="utf-8") as f:
            f.write(info_mods_code)
        
        bat_content = '''@echo off
echo Installing Info+Mods dependencies...
pip install psutil GPUtil pyautogui
echo Info+Mods plugin ready!
pause
'''
        with open(os.path.join(self.plugins_dir, "info_mods.bat"), "w") as f:
            f.write(bat_content)
    
    def create_gui_builder_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ GUI Builder"""
        with open(os.path.join(self.plugins_dir, "gui_builder.py"), "w", encoding="utf-8") as f:
            f.write("# GUI Builder Plugin - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def create_game_engine_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ Game Engine"""
        with open(os.path.join(self.plugins_dir, "game_engine.py"), "w", encoding="utf-8") as f:
            f.write("# Game Engine Plugin - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def create_ai_assistant_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ AI Assistant"""
        with open(os.path.join(self.plugins_dir, "ai_assistant.py"), "w", encoding="utf-8") as f:
            f.write("# AI Assistant Plugin - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class PluginManagerGUI:
    def __init__(self, root):
        self.root = root
        self.manager = PluginManager()
        self.setup_gui()
    
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title("üì¶ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤ Pytonchik")
        self.root.geometry("800x600")
        
        # –í–∫–ª–∞–¥–∫–∏
        tab_control = ttk.Notebook(self.root)
        
        # –í–∫–ª–∞–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        install_tab = ttk.Frame(tab_control)
        tab_control.add(install_tab, text='üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞')
        self.setup_install_tab(install_tab)
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        manage_tab = ttk.Frame(tab_control)
        tab_control.add(manage_tab, text='‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        self.setup_manage_tab(manage_tab)
        
        tab_control.pack(expand=1, fill='both')
    
    def setup_install_tab(self, tab):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        ttk.Label(tab, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:", font=('Arial', 12, 'bold')).pack(pady=10)
        
        # –°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤
        self.plugins_list = tk.Listbox(tab, height=15)
        self.plugins_list.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
        for plugin_id, plugin_info in self.manager.available_plugins.items():
            status = "‚úÖ" if self.manager.is_plugin_installed(plugin_id) else "üì•"
            self.plugins_list.insert(tk.END, f"{status} {plugin_info['name']} ({plugin_id})")
        
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = ttk.Frame(tab)
        btn_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Button(btn_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π", 
                  command=self.install_selected).pack(side='left', padx=5)
        ttk.Button(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.refresh_list).pack(side='left', padx=5)
    
    def setup_manage_tab(self, tab):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        ttk.Label(tab, text="–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:", font=('Arial', 12, 'bold')).pack(pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        self.info_text = scrolledtext.ScrolledText(tab, height=20)
        self.info_text.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.update_installed_info()
    
    def install_selected(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞"""
        selection = self.plugins_list.curselection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
        
        index = selection[0]
        plugin_line = self.plugins_list.get(index)
        plugin_id = plugin_line.split('(')[1].split(')')[0]
        
        result = self.manager.install_plugin(plugin_id)
        messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", result)
        self.refresh_list()
        self.update_installed_info()
    
    def refresh_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        self.plugins_list.delete(0, tk.END)
        for plugin_id, plugin_info in self.manager.available_plugins.items():
            status = "‚úÖ" if self.manager.is_plugin_installed(plugin_id) else "üì•"
            self.plugins_list.insert(tk.END, f"{status} {plugin_info['name']} ({plugin_id})")
    
    def update_installed_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö"""
        info = self.manager.list_installed_plugins()
        self.info_text.delete(1.0, tk.END)
        self.info_text.insert(1.0, info)

def start_plugin_manager_gui():
    """–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"""
    root = tk.Tk()
    app = PluginManagerGUI(root)
    root.mainloop()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    if len(sys.argv) < 2:
        print("""
üì¶ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤ Pytonchik

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  install-sets list              - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
  install-sets installed         - —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
  install-sets install <plugin>  - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω
  install-sets uninstall <plugin>- —É–¥–∞–ª–∏—Ç—å –ø–ª–∞–≥–∏–Ω
  install-sets gui               - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–ü—Ä–∏–º–µ—Ä—ã:
  install-sets install youtube-plus
  install-sets install info-mods
  install-sets list
        """)
        return
    
    command = sys.argv[1]
    manager = PluginManager()
    
    if command == "list":
        print(manager.list_available_plugins())
    elif command == "installed":
        print(manager.list_installed_plugins())
    elif command == "install" and len(sys.argv) > 2:
        plugin_id = sys.argv[2]
        print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞: {plugin_id}")
        print(manager.install_plugin(plugin_id))
    elif command == "uninstall" and len(sys.argv) > 2:
        plugin_id = sys.argv[2]
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞: {plugin_id}")
        print(manager.uninstall_plugin(plugin_id))
    elif command == "gui":
        start_plugin_manager_gui()
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

if __name__ == "__main__":
    main()